// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/klrohias/lcsm-server/panel/auth"
	"github.com/klrohias/lcsm-server/panel/controllers"
	"github.com/klrohias/lcsm-server/panel/db"
)

// Injectors from app.go:

func PanelNewContext() (*AppContext, error) {
	dbContext, err := db.NewDbContext()
	if err != nil {
		return nil, err
	}
	jwtContext := auth.NewJwtContext()
	userController := controllers.NewUserController(dbContext, jwtContext)
	runnerController := controllers.NewRunnerController(dbContext)
	systemController := controllers.NewSystemController(dbContext)
	appContext := NewAppContext(dbContext, jwtContext, userController, runnerController, systemController)
	return appContext, nil
}

// app.go:

var ControllerSet = wire.NewSet(controllers.NewUserController, controllers.NewRunnerController, controllers.NewSystemController)

type AppContext struct {
	DbContext        *db.DbContext
	JwtContext       *auth.JwtContext
	UserController   *controllers.UserController
	RunnerController *controllers.RunnerController
	SystemController *controllers.SystemController
}

func NewAppContext(
	dbContext *db.DbContext,
	jwtContext *auth.JwtContext,
	userController *controllers.UserController,
	runnerController *controllers.RunnerController,
	systemController *controllers.SystemController) *AppContext {
	return &AppContext{
		DbContext:        dbContext,
		JwtContext:       jwtContext,
		UserController:   userController,
		RunnerController: runnerController,
		SystemController: systemController,
	}
}
